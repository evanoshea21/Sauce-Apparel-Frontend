datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  CustomerProfile CustomerProfile[]
}

model CustomerProfile {
  userId String @id @unique

  firstName String
  lastName  String
  phone     String
  email     String

  customerProfileId String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders            Orders[]

  @@index(fields: [userId])
}

model Orders {
  //for refund
  refTransId      String           @id @unique
  amount          String
  cardNum         String
  expDate         String
  //to ref customer who purchased
  userId          String
  //timestamped + order status
  status          String           @default("unfulfilled")
  createdAt       DateTime         @default(now())
  // reference the PurchasedItems
  purchasedItems  PurchasedItems[]
  customerProfile CustomerProfile  @relation(fields: [userId], references: [userId])
}

model PurchasedItems {
  id          String @id @default(cuid())
  sku         String
  name        String
  quantity    String
  unitPrice   String
  img         String
  description String
  refTransId  String

  order Orders @relation(fields: [refTransId], references: [refTransId], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Products {
  id        String @id @default(cuid())
  name      String @unique
  unitPrice String
  imageUrl  String

  inventory         Int? // for if no flavors
  description       String?
  salesPrice        String?
  category          String?
  createdAt         DateTime            @default(now())
  isFeatured        Boolean             @default(false)
  Flavors_Inventory Flavors_Inventory[]

  @@index([id])
}

model Flavors_Inventory {
  sku        String  @id @default(cuid())
  flavor     String
  inventory  Int
  productId  String
  salesPrice String?

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, flavor]) // cant have 2 identical flavors under 1 product
  @@index([productId])
}
